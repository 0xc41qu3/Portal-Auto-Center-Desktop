package model;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.ResultSetInternalMethods;
import com.mysql.jdbc.ResultSetMetaData;

import controller.MySql;
import controller.Partner;

public class PartnerDAO {

	/**
	 * Get all partners existents into DB
	 * @return ArrayList<Partner> Containing all partners
	 * @return empty ArrayList<Partner> Fail to attempt get partners into DB
	 */
	public ArrayList<ParceiroSimplesFormatado> getPartners()
	{
		ArrayList<HashMap<String, String>> partners = new ArrayList<>();

		// Open connection to DB
		MySql db = new MySql();
		Connection con = db.openConnection();

		// Select into DB
		String sql = "SELECT * FROM view_parceiro_simples_formatado";

		try {

			// Create the statement
			PreparedStatement stmt = (PreparedStatement) con.prepareStatement(sql);

			// Execute the query
			ResultSet rs = stmt.executeQuery();

			// Verify if rs has records inside itself
			while(rs.next())
			{
				HashMap<String, String> map = new HashMap<>();

				map.put("id_parceiro", String.valueOf(rs.getInt("id_parceiro")));
				map.put("nome_fantasia", rs.getString("nome_fantasia"));
				map.put("razao_social", rs.getString("razao_social"));
				map.put("cnpj", rs.getString("cnpj"));
				map.put("id_endereco", String.valueOf(rs.getInt("id_endereco")));
				map.put("ativo", rs.getString("ativo"));
				map.put("socorrista", rs.getString("socorrista"));
				map.put("email", rs.getString("email"));
				map.put("telefone", rs.getString("telefone"));
				map.put("foto_perfil", rs.getString("foto_perfil"));
				map.put("celular", rs.getString("celular"));
				map.put("id_usuario", String.valueOf(rs.getInt("id_usuario")));
				map.put("id_plano_contratacao", String.valueOf(rs.getInt("id_plano_contratacao")));
				map.put("plano", rs.getString("plano"));

				// Add partner into list
			    partners.add(map);
			}

			// close connection to DB
			con.close();

			return partners;

		}catch(SQLException e) {
			e.printStackTrace();
			return partners;
		}
	}

	/**
	 * Get partners amount existents into DB
	 * @return int Partner amount
	 * Obs.: Returns -1 if it got some problem during attempt to get data
	 */
	public int getPartnersAmount()
	{
		int response = -1;

		// Open connection to DB
		MySql db = new MySql();
		Connection con = db.openConnection();

		// Select into DB
		String sql = "SELECT COUNT(*) AS qtd_parceiros FROM tbl_parceiro";

		try {

			// Create the statement
			PreparedStatement stmt = (PreparedStatement) con.prepareStatement(sql);

			// Execute the query
			ResultSet rs = stmt.executeQuery();

			// Verify if rs has records inside itself
			if(rs.next())
			{
			    response = rs.getInt("qtd_parceiros");
			}

			// close connection to DB
			con.close();

			return response;

		}catch(SQLException e) {
			e.printStackTrace();
			return response;
		}
	}

	/**
	 * Get active partners amount existents into DB
	 * @return int Partner amount
	 * Obs.: Returns -1 if it got some problem during attempt to get data
	 */
	public int getActivePartnersAmount()
	{
		int response = -1;

		// Open connection to DB
		MySql db = new MySql();
		Connection con = db.openConnection();

		// Select into DB
		String sql = "SELECT COUNT(*) AS ativos FROM tbl_parceiro WHERE ativo = 1";

		try {

			// Create the statement
			PreparedStatement stmt = (PreparedStatement) con.prepareStatement(sql);

			// Execute the query
			ResultSet rs = stmt.executeQuery();

			// Verify if rs has records inside itself
			if(rs.next())
			{
			    response = rs.getInt("ativos");
			}

			// close connection to DB
			con.close();

			return response;

		}catch(SQLException e) {
			e.printStackTrace();
			return response;
		}
	}

	/**
	 * Get inactive partners amount existents into DB
	 * @return int Partner amount
	 * Obs.: Returns -1 if it got some problem during attempt to get data
	 */
	public int getInactivePartnersAmount()
	{
		int response = -1;

		// Open connection to DB
		MySql db = new MySql();
		Connection con = db.openConnection();

		// Select into DB
		String sql = "SELECT COUNT(*) AS inativos FROM tbl_parceiro WHERE ativo = 0";

		try {

			// Create the statement
			PreparedStatement stmt = (PreparedStatement) con.prepareStatement(sql);

			// Execute the query
			ResultSet rs = stmt.executeQuery();

			// Verify if rs has records inside itself
			if(rs.next())
			{
			    response = rs.getInt("inativos");
			}

			// close connection to DB
			con.close();

			return response;

		}catch(SQLException e) {
			e.printStackTrace();
			return response;
		}
	}


}
